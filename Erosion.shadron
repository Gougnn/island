#version 330

#include <variables>
#include <blendmodes>

//#define precision highp float
#define OCTAVES 7u
#define OCTAVE_PERSISTENCE 0.34f

#define DIM ivec2(1024)


parameter float height = 0.34f;


//UTILITARIES FUNCTIONS
float remap(float value, float fromMin, float fromMax, float toMin, float toMax){
	return toMin + (value - fromMin) * (toMax - toMin) / (fromMax - fromMin);
}

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289(vec3 x){
    return x - floor(x * (1.0f / 289.0f)) * 289.0f;
}

vec2 mod289(vec2 x){
    return x - floor(x * (1.0f / 289.0f)) * 289.0f;
}

vec3 permute(vec3 x){
    return mod289(((x*34.0f)+10.0f)*x);
}

float snoise(vec2 v){
    const vec4 C = vec4(
        0.211324865405187,  // (3.0-sqrt(3.0))/6.0
        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
        -0.577350269189626, // -1.0 + 2.0 * C.x
        0.024390243902439   // 1.0 / 41.0
        ); 

// First corner
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    
// Other corners
    vec2 i1;
    
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

// Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));
    
    vec3 m = max(0.5f - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0f);
    m = m*m ;
    m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
    vec3 x = 2.0f * fract(p * C.www) - 1.0f;
    vec3 h = abs(x) - 0.5f;
    vec3 ox = floor(x + 0.5f);
    vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    
    return 130.0f * dot(m, g);
}

vec3 getSteepness(vec2 v){
    float height = snoise(v);
    float dx = snoise(v + vec2(1.0f, 0.0f) * PIXEL_SIZE.x)-height;
    float dy = snoise(v + vec2(0.0f, 1.0f) * PIXEL_SIZE.y)-height;

    return vec3(height, dx, dy);
}

#ifndef OCTAVES
#define OCTAVES 10u
#endif
#ifndef OCTAVE_PERSISTENCE
#define OCTAVE_PERSISTENCE 0.5f
#endif
float terrainH(vec2 x, vec2 octavesOffset){
    vec2 p = x;
    vec2 p0 = p;
    float a = 0.0f;
    float b = 1.0f;
    vec2  d = vec2(0.0f);

    for (uint i = 0u; i < OCTAVES; i++) {
        vec2 p2 = p;
        
        p2 = p0;// + subseed;
        
        vec3 n = getSteepness(p2);
        
        d += n.yz;
        
        a += b * n.x;
        b *= OCTAVE_PERSISTENCE;
        
        p0 = mat2(0.8f, -0.6f, 0.6f, 0.8f) * (p0 + octavesOffset) * 2.1f;
    }

    return remap(a, -1.4f, 1.4f, 0.0f, 1.0f);
}

vec3 simplexNoise(vec2 uv){
    // Ratio uv
    vec2 squaredUV = uv * vec2((float(DIMENSIONS.x) / float(DIMENSIONS.y)), 1.0);
    // centered uv
    vec2 centeredUV = squaredUV - vec2((float(DIMENSIONS.x) / float(DIMENSIONS.y)), 1.0) / 2.0f; 

    float tmp = length(centeredUV)*1.0 +0.2;
//    tmp = abs(tmp * tmp * tmp);
    vec2 warpUV = vec2(centeredUV.x + TIME * 5.f, centeredUV.y);

    float cloudMap = terrainH(warpUV * vec2(1.0f, 2.0f) * 1.0f, vec2(10.f * TIME, 0.0));
    cloudMap = cloudMap > 0.65f ? 1.0f : 0.0f;

    // Terrain
    float terrain = terrainH(centeredUV * 2.0f, vec2(0.0f));
    float terrainXOffset = terrainH(centeredUV * 2.0f + vec2(1.0f, 0.0f) * PIXEL_SIZE, vec2(0.0f));
    float terrainYOffset = terrainH(centeredUV * 2.0f + vec2(0.0f, 1.0f) * PIXEL_SIZE, vec2(0.0f));
     
    // Get terrain normal
    vec3 n;
    n.x = (terrainXOffset - terrain);
    n.y = (terrainYOffset - terrain);
    n.z = PIXEL_SIZE.x * 1.0;

    n = normalize(n);


    float selfShadow = dot(n, normalize(vec3(1.0f)));

    return vec3(selfShadow);
}
















#define MAX_STEPS 100
#define SURFACE_DIST 0.0005f
#define MAX_DIST 100.0f

parameter float tilt = 0.0f : range(-2.0f, 2.0f);
parameter float zoom = 2.0f : range(2.0f, 5.0f);
parameter bool PERSPECTIVE = false;


float getDist(vec3 p){
    float terrain = p.y + terrainH(p.xz, vec2(0.0f)) * height;
    float water = p.y + 0.5f * height;

     
    return min(terrain, water); 
}



float rayMarch(vec3 ro, vec3 rd){
    float dO = 0.0f;
    
    for(int i = 0; i < MAX_STEPS; ++i){
        vec3 p = ro + rd*dO;
        float dS = getDist(p);
        dO += dS * 0.1 ;
        if (dS<SURFACE_DIST || dO>MAX_DIST) break;
    }
    return dO;
}


vec3 getNorm(vec3 p ){
    float d = getDist(p);
    vec2 e = vec2(0.001f, 0.0f);
    vec3 n = d - vec3(getDist(p - e.xyy), getDist(p - e.yxy), getDist(p - e.yyx));
    
    return normalize(n);
}

float getLight(vec3 p){
    //SELFSHADOW
    vec3 lightPos = normalize(vec3(-MOUSE.x, 0.0f, MOUSE.y) + vec3(0.5f, 0.0f, 0.5f));
    lightPos.xz = vec2(sin(TIME), cos(TIME)) * 2.0f;
    vec3 l = normalize(lightPos - p);
    vec3 n = getNorm(p);

    float dif = dot(lightPos, n*1.0);

    return dif;
}
 


float softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float w )
{
    float res = 1.0f;
    float t = mint;
    for( int i=0; i<MAX_STEPS && t<maxt; i++ )
    {
        float h = getDist(ro + rd*t);
        res = min( res, h/(w*t) );
        t += 0.01 ;
        if( res<-1.0 || t>maxt ) break;
    }
    res = max(res,-1.0);
    return 0.25*(1.0+res)*(1.0+res)*(2.0-res);
}


const vec3 mountainColor = vec3(0.60f, 0.55f, 0.55f);
const vec3 treeColor = vec3(0.839,0.714,0.62);
const vec3 grassColor = vec3(0.596,0.678,0.353);
const vec3 sandColor = vec3(0.278,0.463,0.271);
const vec3 seaColor = vec3(0.384,0.651,0.663);

const float grassLevel = 0.05f;
const float treeLevel = 0.25f;
const float mountainLevel = 0.55f;
const float snowLevel = 0.70f;



vec3 raymarch(vec2 uv){ 
    vec2 centeredUV = uv - vec2((float(DIMENSIONS.x) / float(DIMENSIONS.y)), 1.0) / 2.0f; 

    centeredUV *= remap(zoom, 0.0f, 1.0f, 0.0f, 1.0f);

    vec3 ro;
    vec3 rd;
     
    if (PERSPECTIVE) {
        ro = vec3(0.0f, zoom / 1.8f, 0.0f);                         //PERSPECTIVE PROJECTION
        rd = normalize(vec3(centeredUV.x, -1.0f, centeredUV.y + tilt));
    } else {
        ro = vec3(centeredUV.x, 0.0f, centeredUV.y);    //ORTHOGRAPHIC PROJETION
        rd = normalize(vec3(0.0f, -1.0f, tilt));
    }
      
    float d = rayMarch(ro, rd);

    vec3 p = vec3(ro + rd * d);

    //light
    float dif = getLight(p);
    dif = remap(dif, -1.0f, 1.0f, 1.0f, 0.0f);
//

    vec3 col = vec3(1.0f);

    if (terrainH(p.xz, vec2(0.0)) > 0.5f){
        col = seaColor;
    } else {
        col = grassColor;
    }


    col = mix(col, col * vec3(0.0, 0.6, 0.9), dif);
//    col = col * dif;
    col = mix(col * .2, col, softshadow(p, normalize(vec3(sin(TIME) * 2.0f, 1.5f, cos(TIME) * 2.0f)), 0.01 , 3.0, 0.1));

    return vec3(col);
}

animation RAYMARCHING = glsl(raymarch, DIM);

//animation NOISE = glsl(simplexNoise, 1024, 1024);
//image STEEP = glsl(steepness, 512, 512);
