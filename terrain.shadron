#version 330

#include <variables>
#include <blendmodes>
#include <ease>
//#include "/libraries/mod289.shadron"

#define SIZE ivec2(768)
#define STEPS 256
#define UP vec3(0.0f, 0.0f, 1.0f)
#define OCTAVES 7

parameter vec2 offset;
parameter float noiseScale = 5.0f : range(1.0f, 10.0f);
parameter float islandScale = 0.2f : range(0.0f, 10.0f);
parameter float seaLevel = 0.2;

var vec2 MOUSE_POSITION;

void getMouse(vec2 mouse){
    MOUSE_POSITION = mouse;
}

event mouse_position() = getMouse;

watch MOUSE_POSITION;
watch MOUSE;

float remap(float value, float fromMin, float fromMax, float toMin, float toMax){
	return toMin + (value - fromMin) * (toMax - toMin) / (fromMax - fromMin);
}

float pingpong(float a, float b){
    return (b == 0.0f) ? 0.0f : abs(fract((a-b)/(b*2.0f))*b*2.0f-b);
}



vec3 mod289(vec3 x){
    return x - floor(x * (1.0f / 289.0f)) * 289.0f;
}

vec2 mod289(vec2 x){
    return x - floor(x * (1.0f / 289.0f)) * 289.0f;
}

vec3 permute(vec3 x){
    return mod289(((x*34.0f)+10.0f)*x);
}

float snoise(vec2 uv){
    const vec4 C = vec4(
        0.211324865405187, 
        0.366025403784439, 
        -0.577350269189626,
        0.024390243902439   
        ); 

    vec2 i  = floor(uv + dot(uv, C.yy) );
    vec2 x0 = uv -   i + dot(i, C.xx);
    
    vec2 i1;
    
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

    i = mod289(i); 
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));
    
    vec3 m = max(0.5f - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0f);
    m = m*m ;
    m = m*m ;

    vec3 x = 2.0f * fract(p * C.www) - 1.0f;
    vec3 h = abs(x) - 0.5f;
    vec3 ox = floor(x + 0.5f);
    vec3 a0 = x - ox;

    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    
    return 130.0f * dot(m, g);
}

vec3 getSteepness(vec2 uv){
    float height = snoise(uv);
    float dx = snoise(uv + vec2(1.0f, 0.0f) * PIXEL_SIZE.x)-height;
    float dy = snoise(uv + vec2(0.0f, 1.0f) * PIXEL_SIZE.y)-height;

    return vec3(height, dx, dy);
}

#ifndef OCTAVES
#define OCTAVES 10u
#endif
#ifndef OCTAVE_PERSISTENCE
#define OCTAVE_PERSISTENCE 0.35f
#endif
float terrainH(vec2 uv, vec2 octavesOffset, int octaves){
    vec2 p = uv;
    vec2 p0 = p;
    float a = 0.0f;
    float b = 1.0f;
    vec2  d = offset;

    for (int i = 0; i < octaves; i++) {
        vec2 p2 = p;
        
        p2 = p0;
        
        vec3 n = getSteepness(p2);
        
        d += n.yz;
        
        a += b * n.x;
        b *= OCTAVE_PERSISTENCE;
        
        p0 = mat2(0.8f, -0.6f, 0.6f, 0.8f) * (p0 + octavesOffset) * 2.1f;
    }
    a= clamp(remap(a, -1.5f, 1.5f, 0.0f, 1.0f), 0.0f, 1.0f);// * falloff;
    
    float falloff = 1.0-(length(uv/(noiseScale * islandScale) - vec2(1.0f/(2.0f*islandScale))));
    falloff = (clamp(falloff, 0.0f, 1.0f));
    a = blendLinearLight(cubicInOut(a), falloff*0.5, 0.f);

    return a;
}




//float fbm(vec2 uv){
//    vec2 
//        p = uv,
//        p0 = p;
//    float 
//        result = 0.0f,
//        b = 1.0f,
//        pers = remap(
//            1-clamp(
//                length(uv*0.5-vec2(0.5f)),
//                0.0, 0.9
//            ),
//            0.0f, 0.9f, 
//            0.0f, 0.5f
//        );
//    pers = sineInOut(pers);
//
////    result = snoise(uv);
//    for (int i = 0 ; i < 7 ; i++){
//        vec3 n = getSteepness(uv);
//        float nextStep = snoise(uv);
//        result += nextStep * b ;
//        uv *= mat2(0.8f, -0.6f, 0.6f, 0.8f) * 2.1;
//        b *= abs(pers);
//        pers -= 0.05;
//    }
//    result = remap(result, -1.8f, 1.8f, 0.0f, pers * 1.0);
//
//    return max(result, seaLevel);
//}
//
//
//
//
//
//vec3 testdetail(vec2 uv){
//    uv *= 2.0;
//    uv += offset;
//    float
//        height = fbm(uv),                                 //Get Z value
//        dx = fbm(uv + vec2(PIXEL_SIZE.x, 0.0f) ) - height, //Derivative X
//        dy = fbm(uv + vec2(0.0f, PIXEL_SIZE.y)) - height; //Derivative Y
//    vec2 mousePosition = (MOUSE_POSITION * 2.0f - 1.0f) * 5;
//    vec3
//        va = normalize(vec3(PIXEL_SIZE.x, 0.0, dx)), //Tangential Space
//        vb = normalize(vec3(0.0, PIXEL_SIZE.y, dy)), //Binormal Space
//        sunPos = normalize(vec3(mousePosition.x, mousePosition.y,1.0)),
//        n = vec3(cross(va, vb));    
//    
//    return vec3(dot(n, sunPos));
//}
//
//
//animation test = glsl(testdetail, SIZE);









//float getIsland

const vec3
    sandColor = vec3(0.0f, 0.0f, 0.0f),
    dirtColor = vec3(0.57f, 0.28f, 0.01f),
    grassColor = vec3(0.0f, 0.0f, 0.0f),
    bushColor = vec3(0.0f, 0.0f, 0.0f),
    treeColor = vec3(0.0f, 0.0f, 0.0f),
    mountainColor = vec3(0.0f, 0.0f, 0.0f),
    snowColor = vec3(0.0f, 0.0f, 0.0f);
//    Color = vec3(0.0f, 0.0f, 0.0f);


vec3 getNormal(vec2 uv, int octaves){
    float
        height = terrainH(uv, offset, octaves),                                 //Get Z value
        dx = terrainH(uv + vec2(PIXEL_SIZE.x, 0.0f), offset, octaves) - height, //Derivative X
        dy = terrainH(uv + vec2(0.0f, PIXEL_SIZE.y), offset, octaves) - height; //Derivative Y

    vec3
        va = normalize(vec3(PIXEL_SIZE.x, 0.0, dx)), //Tangential Space
        vb = normalize(vec3(0.0, PIXEL_SIZE.y, dy)), //Binormal Space
        n = vec3(cross(va, vb));    
    
    return n;
}

float getShadow(vec3 ro, vec3 rd, int octaves){
    int maxSteps = 100; 
    float t;
    vec3 p = ro;

    for ( int step = 0 ; step < maxSteps ; step++ ){
        float h = terrainH(p.xy, offset, octaves);

        if (p.z < h){
            break;
        }
//        if (p.z > 1.0f) break;
        p += rd * max(0.01f, (p.z - h) * 0.05f);
        t += 1.0f/float(maxSteps);
    }
    return 1.0f - t;
}

vec3 render(vec2 uv){
    vec2 mousePosition = (MOUSE_POSITION * 2.0f - 1.0f) * 10;

//    uv += offset * vec2(0.5f, 1.0f);
    uv *= noiseScale;

    vec3 
        normal = getNormal(uv, OCTAVES),
//        sunPos = vec3(mousePosition.x, mousePosition.y, .1),
        sunPos = vec3((pingpong(TIME/10.0, 1.0f)-.5) * 5.0, 0.5f, circularOut(pingpong(TIME/10.0, 0.5f))),
        rayOrigin = vec3(uv, terrainH(uv, offset, OCTAVES)),
        rayDir = normalize(sunPos),
        col;
    float 
        height = terrainH(uv, offset, OCTAVES),
        selfShadow = dot(normal, sunPos),
        contactShadow = getShadow(rayOrigin, rayDir, OCTAVES) * 0.8f;// - clamp(diffuse, 0.0f, 0.5f);

    vec3 diffuseColor = (height > seaLevel) ? vec3(0.54f, 0.88f, 0.54f) : vec3(0, 0.71, 0.85);
    
    col = mix(blendOverlay(diffuseColor * 0.2, vec3(0.4f, 0.4f, 1.0f), 1.0), diffuseColor, 1-contactShadow);
//    col = mix(col, col * 0.5, shadow);
    


    float islandMask = 1.0-(length(uv/(noiseScale * 0.5f) - vec2(1.0f)));
    islandMask = pow(islandMask, 1.0);
    islandMask = smoothstep(0.0f, 1.0f, islandMask);
    islandMask = clamp(islandMask, 0.0f, 1.0f);

    vec2 uvTest = (uv+offset)*noiseScale;
    uvTest -= vec2(noiseScale / 2.0f);
    uvTest *= pow(length(uvTest/100.0), -0.4);







    //SHORELINE TEST
    float lod = terrainH(uv, offset, 5);
    float pTerrain = dot(vec3(uv, height), normal);
    float pSea = dot(vec3(uv, 0.0f), vec3(0.0f, 0.0f, 1.0f)) + 0.5f;

    float plane = (height < seaLevel && height > seaLevel - 0.05) ? smoothstep(0.0f, 1.0f, abs((sin(TIME*0.1 + lod*50)))) : 0.0f;
    float test = clamp(remap(lod, seaLevel - 0.05, seaLevel, 0.0f, 0.5f), 0.0f, 1.0f);
    test = smoothstep(0.0f, 1.0f, pingpong(test, 0.5f) * 2.0)*plane;

    float shoreline = (height < seaLevel && height > seaLevel - 0.05) ? terrainH(mix(uv*5, vec2(test), 0.8), offset, 8) : 0.0f;


    shoreline = (shoreline > 0.7f) ? 1.0f : 0.0f;
//    float falloff = 1.0-(length(uv/(noiseScale * islandScale) - vec2(1.0f/(2.0f*islandScale))));
//    falloff = sineOut(clamp(falloff, 0.0f, 1.0f));
////    islandMask = blendOverlay(falloff, height, 1.0f);
//    islandMask = blendLinearLight(height, falloff*0.5, 1.0f);

    return vec3(contactShadow);
}








animation normal = glsl(render, SIZE);// : filter(nearest);